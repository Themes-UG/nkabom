{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'row',
   
  ]
%}

  {% block paragraph %}
  
   
      {% block content %} 
       
    
           
        {# {% for i in content.field_images['#items']|keys %}
          {{ content.field_images[i] }}
        {% endfor %}

        {{ content.field_images["#items"]|keys }} 

        {% set index = content.field_images["#items"]|length %}   #}

         
        <div id="carouselExampleAutoplaying" class="carousel slide" data-ride="carousel">
          <div class="carousel-indicators-arrows">
            <a class="carousel-control-prev previous-slide" href="#carouselExampleAutoplaying" data-slide="prev">
              <span class="carousel-control-prev-icon"></span>
            </a>
            <ul class="carousel-indicators">
              {% for i in content.field_slides['#items']|keys %}
                {% if i == 0 %}
                    <li data-target="#carouselExampleAutoplaying" data-slide-to="[i]" class="active"></button>  
                {% else %}
                    <li data-target="#carouselExampleAutoplaying" data-slide-to="[i]"></button>
                {% endif %}
              {% endfor %}
            </ul> 
            <a class="carousel-control-next next-slide " href="#carouselExampleAutoplaying" data-slide="next">
              <span class="carousel-control-next-icon"></span>
            </a>
          </div>   
          <div class="carousel-inner">
              {% for i in content.field_slides['#items']|keys %}
                {% if i == 0 %}
                  <div class="carousel-item active" data-bs-interval="300">
                      {# {{ content.field_images[i] }} #}
                      {# <div style=" background:linear-gradient(rgba(0,0,0,0),#153d6e 100%), url('{{ file_url(paragraph.field_images[i].entity.uri.value) }}') no-repeat center center/cover; height: 100vh;"></div>
                      <div class="carousel-caption d-none d-md-block">
                            <h1>First slide label</h1>
                            <p>Some representative placeholder content for the second slide.</p>
                          </div> #}

                          {{ content.field_slides[i] }}
                  </div>
                {% else %}  
                  <div class="carousel-item" data-bs-interval="300">
                      {# {{ content.field_images[i] }} #}
                      {# <div style=" background:linear-gradient(rgba(0,0,0,0),#153d6e 100%), url('{{ file_url(paragraph.field_images[i].entity.uri.value) }}') no-repeat center center/cover; height: 100vh;"></div>
                        <div class="carousel-caption d-none d-md-block">
                            <h1>Second slide label</h1>
                            <p>Some representative placeholder content for the second slide.</p>
                          </div> #}
                        {{ content.field_slides[i] }}   
                  </div>
                {% endif %}  
              {% endfor %}
            </div>
            {# <a class="carousel-control-prev previous-slide" href="#carouselExampleAutoplaying" data-slide="prev">
              <span class="carousel-control-prev-icon"></span>
            </a>
            <a class="carousel-control-next next-slide " href="#carouselExampleAutoplaying" data-slide="next">
              <span class="carousel-control-next-icon"></span>
            </a> #}
        </div>

        {# {{ index }}   #}
       
      {% endblock %}
   
 
  {% endblock paragraph %}
{# 
 {{  file_url(paragraph.field_images[1].entity.uri.value) | json_encode(constant('JSON_PRETTY_PRINT')) }} #}

